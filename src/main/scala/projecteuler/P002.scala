package projecteuler

import scala.annotation.tailrec

// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:
//
// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
//
// By considering the terms in the Fibonacci sequence whose values do not
// exceed four million, find the sum of the even-valued terms.
object P002 extends App {

  def fibonacciUntil(max: Int): List[Int] = {
    @tailrec
    def doFibonacciUntil(acc: List[Int]): List[Int] =
      acc match {
        case h :: t if h > max => t.reverse
        case h :: hh :: t => doFibonacciUntil(h + hh :: acc)
      }

    doFibonacciUntil(2 :: 1 :: Nil)
  }

  def sumEvenValuedFibonacciUntil(max: Int): Int =
    (
      for {
        e <- fibonacciUntil(max)
        if e % 2 == 0
      } yield
        e)
      .sum


  println(sumEvenValuedFibonacciUntil(4e6.toInt))
}
